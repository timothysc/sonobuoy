---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  annotations:
    sonobuoy-driver: DaemonSet
    sonobuoy-plugin: systemd_logs
    sonobuoy-result-type: systemd_logs
  labels:
    component: sonobuoy
    sonobuoy-run: '{{.SessionID}}'
    tier: analysis
  name: systemd-logs
  namespace: '{{.Namespace}}'
spec:
  selector:
    matchLabels:
      sonobuoy-run: '{{.SessionID}}'
  template:
    metadata:
      labels:
        component: sonobuoy
        sonobuoy-run: '{{.SessionID}}'
        tier: analysis
    spec:
      containers:
      - command:
        - sh
        - -c
        - /get_systemd_logs.sh && sleep 3600
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: RESULTS_DIR
          value: /tmp/results
        - name: CHROOT_DIR
          value: /node
        image: gcr.io/heptio-images/sonobuoy-plugin-systemd-logs:latest
        imagePullPolicy: Always
        name: sonobuoy-systemd-logs-config-{{.SessionID}}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /tmp/results
          name: results
          readOnly: false
        - mountPath: /node
          name: root
          readOnly: false
      - command:
        - sh
        - -c
        - /sonobuoy worker single-node -v 5 --logtostderr && sleep 3600
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: RESULTS_DIR
          value: /tmp/results
        - name: MASTER_URL
          value: '{{.MasterAddress}}'
        - name: RESULT_TYPE
          value: systemd_logs
        image: gcr.io/heptio-images/sonobuoy:master
        imagePullPolicy: Always
        name: sonobuoy-worker
        volumeMounts:
        - mountPath: /tmp/results
          name: results
          readOnly: false
      dnsPolicy: ClusterFirstWithHostNet
      hostIPC: true
      hostNetwork: true
      hostPID: true
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
      volumes:
      - emptyDir: {}
        name: results
      - hostPath:
          path: /
        name: root
